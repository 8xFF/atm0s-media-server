pub enum G711Codec {
    Alaw,
    Ulaw,
}

const ALAW_TO_LINEAR: [i16; 256] = [
    -5504, -5248, -6016, -5760, -4480, -4224, -4992, -4736, -7552, -7296, -8064, -7808, -6528, -6272, -7040, -6784, -2752, -2624, -3008, -2880, -2240, -2112, -2496, -2368, -3776, -3648, -4032, -3904,
    -3264, -3136, -3520, -3392, -22016, -20992, -24064, -23040, -17920, -16896, -19968, -18944, -30208, -29184, -32256, -31232, -26112, -25088, -28160, -27136, -11008, -10496, -12032, -11520, -8960,
    -8448, -9984, -9472, -15104, -14592, -16128, -15616, -13056, -12544, -14080, -13568, -344, -328, -376, -360, -280, -264, -312, -296, -472, -456, -504, -488, -408, -392, -440, -424, -88, -72,
    -120, -104, -24, -8, -56, -40, -216, -200, -248, -232, -152, -136, -184, -168, -1376, -1312, -1504, -1440, -1120, -1056, -1248, -1184, -1888, -1824, -2016, -1952, -1632, -1568, -1760, -1696,
    -688, -656, -752, -720, -560, -528, -624, -592, -944, -912, -1008, -976, -816, -784, -880, -848, 5504, 5248, 6016, 5760, 4480, 4224, 4992, 4736, 7552, 7296, 8064, 7808, 6528, 6272, 7040, 6784,
    2752, 2624, 3008, 2880, 2240, 2112, 2496, 2368, 3776, 3648, 4032, 3904, 3264, 3136, 3520, 3392, 22016, 20992, 24064, 23040, 17920, 16896, 19968, 18944, 30208, 29184, 32256, 31232, 26112, 25088,
    28160, 27136, 11008, 10496, 12032, 11520, 8960, 8448, 9984, 9472, 15104, 14592, 16128, 15616, 13056, 12544, 14080, 13568, 344, 328, 376, 360, 280, 264, 312, 296, 472, 456, 504, 488, 408, 392,
    440, 424, 88, 72, 120, 104, 24, 8, 56, 40, 216, 200, 248, 232, 152, 136, 184, 168, 1376, 1312, 1504, 1440, 1120, 1056, 1248, 1184, 1888, 1824, 2016, 1952, 1632, 1568, 1760, 1696, 688, 656, 752,
    720, 560, 528, 624, 592, 944, 912, 1008, 976, 816, 784, 880, 848,
];

const ULAW_TO_LINEAR: [i16; 256] = [
    -32124, -31100, -30076, -29052, -28028, -27004, -25980, -24956, -23932, -22908, -21884, -20860, -19836, -18812, -17788, -16764, -15996, -15484, -14972, -14460, -13948, -13436, -12924, -12412,
    -11900, -11388, -10876, -10364, -9852, -9340, -8828, -8316, -7932, -7676, -7420, -7164, -6908, -6652, -6396, -6140, -5884, -5628, -5372, -5116, -4860, -4604, -4348, -4092, -3900, -3772, -3644,
    -3516, -3388, -3260, -3132, -3004, -2876, -2748, -2620, -2492, -2364, -2236, -2108, -1980, -1884, -1820, -1756, -1692, -1628, -1564, -1500, -1436, -1372, -1308, -1244, -1180, -1116, -1052, -988,
    -924, -876, -844, -812, -780, -748, -716, -684, -652, -620, -588, -556, -524, -492, -460, -428, -396, -372, -356, -340, -324, -308, -292, -276, -260, -244, -228, -212, -196, -180, -164, -148,
    -132, -120, -112, -104, -96, -88, -80, -72, -64, -56, -48, -40, -32, -24, -16, -8, -1, 32124, 31100, 30076, 29052, 28028, 27004, 25980, 24956, 23932, 22908, 21884, 20860, 19836, 18812, 17788,
    16764, 15996, 15484, 14972, 14460, 13948, 13436, 12924, 12412, 11900, 11388, 10876, 10364, 9852, 9340, 8828, 8316, 7932, 7676, 7420, 7164, 6908, 6652, 6396, 6140, 5884, 5628, 5372, 5116, 4860,
    4604, 4348, 4092, 3900, 3772, 3644, 3516, 3388, 3260, 3132, 3004, 2876, 2748, 2620, 2492, 2364, 2236, 2108, 1980, 1884, 1820, 1756, 1692, 1628, 1564, 1500, 1436, 1372, 1308, 1244, 1180, 1116,
    1052, 988, 924, 876, 844, 812, 780, 748, 716, 684, 652, 620, 588, 556, 524, 492, 460, 428, 396, 372, 356, 340, 324, 308, 292, 276, 260, 244, 228, 212, 196, 180, 164, 148, 132, 120, 112, 104, 96,
    88, 80, 72, 64, 56, 48, 40, 32, 24, 16, 8, 0,
];

/// Convert an 8-bit A-law value to a 16-bit LPCM sample.
#[inline]
pub fn alaw_to_linear(alaw_value: u8) -> i16 {
    ALAW_TO_LINEAR[(alaw_value) as usize]
}

/// Convert an 8-bit µ-law value to a 16-bit LPCM sample.
#[inline]
pub fn ulaw_to_linear(ulaw_value: u8) -> i16 {
    ULAW_TO_LINEAR[ulaw_value as usize]
}

/// Convert a 16-bit LPCM sample to an 8-bit A-law value.
#[allow(overflowing_literals, unused_comparisons)]
pub fn linear_to_alaw(sample: i16) -> u8 {
    let mut pcm_value = sample;
    let sign = (pcm_value & 0x8000) >> 8;
    if sign != 0 {
        pcm_value = -pcm_value;
    }
    // Clip at 15-bits
    if pcm_value > 0x7fff {
        pcm_value = 0x7fff;
    }
    let mut exponent: i16 = 7;
    let mut mask = 0x4000;
    while pcm_value & mask == 0 && exponent > 0 {
        exponent -= 1;
        mask >>= 1;
    }
    let manitssa: i16 = if exponent == 0 {
        (pcm_value >> 4) & 0x0f
    } else {
        (pcm_value >> (exponent + 3)) & 0x0f
    };
    let alaw_value = sign | exponent << 4 | manitssa;
    (alaw_value ^ 0xd5) as u8
}

/// Convert a 16-bit LPCM sample to an 8-bit µ-law value.
pub fn linear_to_ulaw(sample: i16) -> u8 {
    let mut pcm_value = sample;
    let sign = (pcm_value >> 8) & 0x80;
    if sign != 0 {
        pcm_value = -pcm_value;
    }
    if pcm_value > 32635 {
        pcm_value = 32635;
    }
    pcm_value += 0x84;
    let mut exponent: i16 = 7;
    let mut mask = 0x4000;
    while pcm_value & mask == 0 {
        exponent -= 1;
        mask >>= 1;
    }
    let manitssa: i16 = (pcm_value >> (exponent + 3)) & 0x0f;
    let ulaw_value = sign | exponent << 4 | manitssa;
    (!ulaw_value) as u8
}

#[cfg(test)]
mod coding {
    mod encode {
        use crate::rtp_engine::g711::{linear_to_alaw, linear_to_ulaw};

        #[test]
        fn i16_to_alaw() {
            assert_eq!(213, linear_to_alaw(0));
            assert_eq!(213, linear_to_alaw(1));
            assert_eq!(213, linear_to_alaw(2));
            assert_eq!(85, linear_to_alaw(-3));
            assert_eq!(85, linear_to_alaw(-4));
        }

        #[test]
        fn i16_to_ulaw() {
            assert_eq!(0xff, linear_to_ulaw(0));
            assert_eq!(0x7f, linear_to_ulaw(-1));
        }
    }
    mod decode {
        use crate::rtp_engine::g711::{alaw_to_linear, ulaw_to_linear};

        #[test]
        fn alaw_to_i16() {
            assert_eq!(8, alaw_to_linear(213));
            assert_eq!(-8, alaw_to_linear(85));
        }

        #[test]
        fn ulaw_to_i16() {
            assert_eq!(0, ulaw_to_linear(0xff));
            assert_eq!(-1, ulaw_to_linear(0x7f));
        }
    }
}
