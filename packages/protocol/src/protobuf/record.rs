// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordHeader {
    #[prost(uint64, tag = "1")]
    pub start_ts: u64,
    #[prost(uint64, tag = "2")]
    pub session: u64,
    #[prost(string, tag = "3")]
    pub ip_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub user_agent: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub room: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub peer: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordChunk {
    #[prost(uint32, tag = "1")]
    pub track_id: u32,
    #[prost(uint32, tag = "2")]
    pub ts: u32,
    #[prost(oneof = "record_chunk::Chunk", tags = "3, 4, 5")]
    pub chunk: ::core::option::Option<record_chunk::Chunk>,
}
/// Nested message and enum types in `RecordChunk`.
pub mod record_chunk {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TrackStarted {
        #[prost(enumeration = "super::super::shared::Kind", tag = "1")]
        pub kind: i32,
        #[prost(string, tag = "2")]
        pub name: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub codec: ::prost::alloc::string::String,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TrackStopped {}
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TrackMedia {
        #[prost(uint32, tag = "1")]
        pub media_ts: u32,
        #[prost(uint32, tag = "2")]
        pub media_seq: u32,
        #[prost(bool, tag = "3")]
        pub marker: bool,
        #[prost(bytes = "vec", tag = "4")]
        pub payload: ::prost::alloc::vec::Vec<u8>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Chunk {
        #[prost(message, tag = "3")]
        TrackStarted(TrackStarted),
        #[prost(message, tag = "4")]
        TrackStopped(TrackStopped),
        #[prost(message, tag = "5")]
        TrackMedia(TrackMedia),
    }
}
