syntax = "proto3";

package cluster_connector;

import "shared.proto";

message HookEvent {
    uint32 node = 1;
    uint64 ts = 2;
    oneof event {
        RoomEvent room = 3;
        PeerEvent peer = 4;
        RecordEvent record = 5;
        ComposeEvent compose = 6;
    }
}

message ConnectorRequest {
    uint64 req_id = 1;
    uint64 ts = 2;
    oneof request {
        PeerEvent peer = 3;
        RecordReq record = 4;
    }
}

message ConnectorResponse {
    message Error {
        uint32 code = 1;
        string message = 2;
    }

    uint64 req_id = 1;
    oneof response {
        Error error = 2;
        PeerRes peer = 3;
        RecordRes record = 4;
    }
}

message PeerEvent {
    message RouteBegin {
        string remote_ip = 1;
    }

    message RouteSuccess {
        uint32 after_ms = 1;
        uint32 dest_node = 2;
    }

    message RouteError {
        enum ErrorType {
            PoolEmpty = 0;
            Timeout = 1;
            GatewayError = 2;
            MediaError = 3;
        }

        uint32 after_ms = 1;
        optional uint32 dest_node = 2;
        ErrorType error = 3;
    }

    message Connecting {
        string remote_ip = 1;
    }

    message ConnectError {
        enum ErrorType {
            InvalidSdp = 0;
            Timeout = 1;
        }

        uint32 after_ms = 1;
        ErrorType error = 2;
    }

    message Join {
        string room = 1;
        string peer = 2;
    }

    message Leave {
        string room = 1;
        string peer = 2;
    }

    message Connected {
        uint32 after_ms = 1;
        string remote_ip = 2;
    }

    message Stats {
        uint64 sent_bytes = 1;
        uint64 received_bytes = 2;
    }

    message Reconnecting {
        string remote_ip = 1;
    }

    message Reconnected {
        uint32 after_ms = 1;
        string remote_ip = 2;
    }

    message Disconnected {
        enum Reason {
            UserAction = 0;
            Timeout = 1;
            NodeShutdown = 2;
            KickByAPI = 3;
        }

        uint32 duration_ms = 1;
        Reason reason = 2;
    }

    message RemoteTrackStarted {
        string track = 1;
        shared.Kind kind = 2;
    }

    message RemoteTrackEnded {
        string track = 1;
        shared.Kind kind = 2;
    }

    message LocalTrack {
        int32 track = 1;
        shared.Kind kind = 2;
    }

    message LocalTrackAttach {
        int32 track = 1;
        string remote_peer = 2;
        string remote_track = 3;
    }

    message LocalTrackDetach {
        int32 track = 1;
        string remote_peer = 2;
        string remote_track = 3;
    }

    string app = 19;
    uint64 session_id = 1;

    oneof event {
        RouteBegin route_begin = 2;
        RouteSuccess route_success = 3;
        RouteError route_error = 4;
        Connecting connecting = 5;
        Connected connected = 6;
        ConnectError connect_error = 7;
        Stats stats = 8;
        Reconnecting reconnect = 9;
        Reconnected reconnected = 10;
        Disconnected disconnected =  11;
        Join join = 12;
        Leave leave = 13;
        RemoteTrackStarted remote_track_started = 14;
        RemoteTrackEnded remote_track_ended = 15;
        LocalTrack local_track = 16;
        LocalTrackAttach local_track_attach = 17;
        LocalTrackDetach local_track_detach = 18;
    }
}

message PeerRes {

}

message RoomEvent {
    message RoomStarted {

    }

    message RoomPeerJoined {
        string peer = 1;
    }

    message RoomPeerLeaved {
        string peer = 1;
    }

    message RoomAllPeersLeaved {

    }

    message RoomStopped {

    }

    string app = 7;
    string room = 1;
    oneof event {
        RoomStarted started = 2;
        RoomPeerJoined peer_joined = 3;
        RoomPeerLeaved peer_leaved = 4;
        RoomAllPeersLeaved all_peers_leaved = 5;
        RoomStopped stopped = 6;
    }
}

message RecordEvent {
    message RecordStarted {
        string path = 1;
    }

    message RecordPeerJoined {
        string peer = 1;
        string path = 2;
    }

    string app = 4;
    string room = 1;
    oneof event {
        RecordStarted started = 2;
        RecordPeerJoined peer_joined = 3;
    }
}

message ComposeEvent {
    message RecordJobStarted {
        
    }

    message RecordJobFailed {
        string error = 2;
    }

    message RecordJobCompleted {
        message TrackTimeline {
            string path = 1;
            uint64 start = 2;
            uint64 end = 3; // Optional field, can be omitted
        }

        message TrackSummary {
            shared.Kind kind = 1;
            repeated TrackTimeline timeline = 2;
        }

        message SessionSummary {
            map<string, TrackSummary> track = 1;
        }

        message PeerSummary {
            map<uint64, SessionSummary> sessions = 1;
        }

        message RecordSummary {
            map<string, PeerSummary> peers = 1;
        }

        RecordSummary summary = 1;
        string summary_uri = 2;
    }

    string app = 1;
    string job_id = 2;

    oneof event {
        RecordJobStarted started = 10;
        RecordJobFailed failed = 11;
        RecordJobCompleted completed = 12;
    }
}

message RecordReq {    
    string room = 1;
    string peer = 2;
    uint64 session = 3;
    uint32 index = 4;
    uint64 from_ts = 5;
    uint64 to_ts = 6;
    string app = 7;
}

message RecordRes {
    string s3_uri = 1;
}

message GetParams {
    uint32 page = 1;
    uint32 limit = 2;
}

message GetRooms {
    message RoomInfo {
        int32 id = 1;
        string app = 5;
        string room = 2;
        uint64 created_at = 3;
        uint32 peers = 4;
        optional string record = 6;
    }

    repeated RoomInfo rooms = 1;
    shared.Pagination pagination = 2;
}

message GetPeerParams {
    optional int32 room = 1;
    uint32 page = 2;
    uint32 limit = 3;
}

message PeerSession {
    int32 id = 1;
    int32 peer_id = 2;
    string peer = 3;
    uint64 session = 4;
    uint64 created_at = 5;
    uint64 joined_at = 6;
    optional uint64 leaved_at = 7;
}

message GetPeers {
    message PeerInfo {
        int32 id = 1;
        int32 room_id = 2;
        string room = 3;
        string peer = 4;
        uint64 created_at = 5;
        repeated PeerSession sessions = 6;
    }

    repeated PeerInfo peers = 1;
    shared.Pagination pagination = 2;
}

message GetSessions {
    message SessionInfo {
        string app = 7;
        uint64 id = 1;
        optional string ip = 2;
        optional string user_agent = 3;
        optional string sdk = 4;
        uint64 created_at = 5;
        repeated PeerSession peers = 6;
    }

    repeated SessionInfo sessions = 1;
    shared.Pagination pagination = 2;
}

message GetEventParams {
    optional uint64 session = 1;
    optional uint64 start_ts = 2;
    optional uint64 end_ts = 3;
    uint32 page = 4;
    uint32 limit = 5;
}

message GetEvents {
    message EventInfo {
        int32 id = 1;
        uint32 node = 2;
        uint64 node_ts = 3;
        uint64 session = 4;
        uint64 created_at = 5;
        string event = 6;
        optional string meta = 7;
    }

    repeated EventInfo events = 1;
    shared.Pagination pagination = 2;
}

service MediaConnector {
    rpc Rooms (GetParams) returns (GetRooms);
    rpc Peers (GetPeerParams) returns (GetPeers);
    rpc Sessions (GetParams) returns (GetSessions);
    rpc Events (GetEventParams) returns (GetEvents);
}
